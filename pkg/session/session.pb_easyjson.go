// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package session

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDd312ac0Decode20182StacktivityPkgSession(in *jlexer.Lexer, out *sessionManagerClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd312ac0Encode20182StacktivityPkgSession(out *jwriter.Writer, in sessionManagerClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sessionManagerClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd312ac0Encode20182StacktivityPkgSession(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sessionManagerClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd312ac0Encode20182StacktivityPkgSession(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sessionManagerClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd312ac0Decode20182StacktivityPkgSession(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sessionManagerClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd312ac0Decode20182StacktivityPkgSession(l, v)
}
func easyjsonDd312ac0Decode20182StacktivityPkgSession1(in *jlexer.Lexer, out *SessionID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd312ac0Encode20182StacktivityPkgSession1(out *jwriter.Writer, in SessionID) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SessionID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd312ac0Encode20182StacktivityPkgSession1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SessionID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd312ac0Encode20182StacktivityPkgSession1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SessionID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd312ac0Decode20182StacktivityPkgSession1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SessionID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd312ac0Decode20182StacktivityPkgSession1(l, v)
}
func easyjsonDd312ac0Decode20182StacktivityPkgSession2(in *jlexer.Lexer, out *Session) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd312ac0Encode20182StacktivityPkgSession2(out *jwriter.Writer, in Session) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Session) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd312ac0Encode20182StacktivityPkgSession2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Session) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd312ac0Encode20182StacktivityPkgSession2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Session) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd312ac0Decode20182StacktivityPkgSession2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Session) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd312ac0Decode20182StacktivityPkgSession2(l, v)
}
func easyjsonDd312ac0Decode20182StacktivityPkgSession3(in *jlexer.Lexer, out *Nothing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dummy":
			out.Dummy = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd312ac0Encode20182StacktivityPkgSession3(out *jwriter.Writer, in Nothing) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Dummy {
		const prefix string = ",\"dummy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Dummy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Nothing) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd312ac0Encode20182StacktivityPkgSession3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Nothing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd312ac0Encode20182StacktivityPkgSession3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Nothing) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd312ac0Decode20182StacktivityPkgSession3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Nothing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd312ac0Decode20182StacktivityPkgSession3(l, v)
}
